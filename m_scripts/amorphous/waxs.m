function [ifu,sk,inte,fac] = waxs(k,icor,sample,coh,inc,ave,limits);% WAXS Normalization of wide-angle x-ray scattering data%% Usage:% [ifu,sk,inte,fac]=waxs(k,icor,sample,coh,inc,avef2,limits);%% Normalizes experimental scattering data by the high-angle method of% Warren and the integral method of Norman and Krogh-Moe. Both% calculations are done, and the results compared. The user then% selects which normalization to keep. The reduced interference % function i(k) and total structure factor S(k) are calculated from% the normalized scattering data.%% Input:% 	k         = array of scattering vector magnitudes (inv. Angstroms)% 	icor      = array of corrected intensities (counts) (see CORINT.M)% 	sample    = [thick rho atden], where:%             thick     = thickness of the sample (cm)%             rho       = density g/cm**3%             atden     = atomic density 1/A**3% 	coh       = coherent independent intensity <ff*>% 	inc       = incoherent scattering intensity (Compton)% 	avef2     = the square of the average scattering amplitude <f><f*>% 	limits    = [imin imax lmin lmax]%             imin,imax = limits of k for integral normalization%             lmin,lmax = limits of k for high angle normalization%% Output:%	ifu		= reduced interference function, i(k)%   sk      = total structure factor, S(k). Note that S(k)=i(k)+1.%	inte	= array of experimental coherent intensity (electron units)%	fac		= normalization constant%% Todd Hufnagel (hufnagel@jhu.edu), 5-2-00% Originally by R. Serimaa% Modifications by TCH 1-11-94% Significant modification, TCH 1-15-94:%   The corrections (absorption, polarization, and multiple scattering) are%   now calculated by a separate routine ABSCOR.M; this means that the%   input to WAXS.M is the _corrected_ data.  This was done to make each%   step of the data analysis more ameanable to inspection.% Added Fuoss' normalization method.  TCH 1-26-94% TCH 7-27-99 Automatically reshape input to row vectors, remove references %             to Fuoss normalization, automatically do both Warren (large%             angle) Norman/Krogh-Moe (integral) normalizations.% TCH 5-2-00 Remove fluorescence correction; code clean-up.% 12-May-03 TCH Actually return S(k). Incorporate EXPCOH into this file.% Needs: largeangle.m,integral.m, interfu.m% The reduced interference function i(k) and the total structure factor% S(k) are defined as follows:%%	i(k)=(inte-coh)/avef2, and%	S(k)=(inte-(coh-avef2))/avef2,% % where inte is the coherent scattered intensity, coh is the% independent coherent scattering, and avef2 is the average% scattering factor squared. Note that S(k)=i(k)+1.global PROBEif isempty(PROBE)    PROBE=0;                    % Choose x-rays by defaultelse    switch PROBE      case 0                    % x-rays          xlabel('k (inv. Å)')      case 1                    % electrons          xlabel('s (inv. Å)')      otherwise           error('Unknown setting of global PROBE! (Should be 0 for x-rays or 1 for electrons.)')   endendk=k(:);icor=icor(:);coh=coh(:);inc=inc(:);ave=ave(:);atden = sample(3);% Do Warren normalization firstnor='largeang';kmin = limits(3);kmax = limits(4);[la_ifu,la_inte,la_fac] = expcoh(k,icor,coh,inc,ave,kmin,kmax,atden,nor);% Now do integral normalizationnor='integral';kmin = limits(1);kmax = limits(2);[int_ifu,int_inte,int_fac] = expcoh(k,icor,coh,inc,ave,kmin,kmax,atden,nor);% Show the results and ask the user to choose between themplot(k,la_ifu,'r',k,int_ifu,'b');title('Normalization');ylabel('i(k)');legend('Large angle','Integral');grid  switch PROBE      case 0                    % x-rays          xlabel('k (inv. Angstroms)')      case 1                    % electrons          xlabel('s (inv. Angstroms)')      otherwise           error('Unknown setting of global PROBE! (Should be 0 for x-rays or 1 for electrons.)')   enddisp(sprintf('Large angle constant = %g, integral constant = %g.',la_fac,int_fac))disp(sprintf('Difference is %g%%',(la_fac-int_fac)/int_fac*100))nor = input('Use which one? (L/[I]): ','s');if (length(nor)==0) nor='integral'; endif (nor(1) == 'l' | nor(1) == 'L'),	 inte=la_inte;ifu=la_ifu;fac=la_fac;     disp('Large angle normalization selected.') else	 inte=int_inte;ifu=int_ifu;fac=int_fac;     disp('Integral normalization selected.')end% Calculate the total structure factor, S(k)sk=ifu+1;% Make sure we return column vectorsifu=ifu(:);sk=sk(:);inte=inte(:);%--------------------------------------------------------------------------function [ifu,inte,fac] = expcoh(k,icor,coh,inc,avef2,kmin,kmax,atden,nor);% EXPCOH  Experimental coherent intensity and interference function%% Usage:%	[ifu,inte,fac] = expcoh(k,icor,coh,inc,avef2,kmin,kmax,navg,atden,nor)%% Performs normalization of scattering data and calculates the interference% function and total structure factor. Note that WAXS.M is a more convenient% front end to this routine.%% Input:%    k         = array of scattering vector magnitudes (inv. Å)%    icor      = array of corrected intensity values%    coh       = coherent independent intensity <ff*>%    inc       = incoherent independent (Compton) intensity%    avef2     = the square of the average scattering amplitude <f><f*>%    kmin,kmax = limits of the range of k used for normalization%    atden     = atomic density%    nor       = string containing the name of the normalization function%                in quotes: 'largeanglenorm' or 'integralnorm'% Output:%    ifu    = reduced interference function i(k)%    inte   = experimental coherent intensity%    fac    = normalization factor% Todd Hufnagel (hufnagel@jhu.edu)% Originally by Ritva Serimaa% Plotting updated by TCH 1-10-94% Fuoss' normalization method added, TCH 1-26-94% TCH 5-2-00 Removed Fuoss normalization scheme, removed plotting% Check which radiation we're using; x-rays (PROBE=0) are the default   global PROBE     if isempty(PROBE) PROBE=0;end   if ~((PROBE==0)|(PROBE==1))       error('Unknown setting of global PROBE! (Should be 0 for x-rays or 1 for electrons.)')   endk=k(:);icor=icor(:);coh=coh(:);inc=inc(:);avef2=avef2(:);if lower(nor(1:2))== 'la',   fac = largeangle(k,kmin,kmax,icor,coh,inc);else   fac = integral(k,kmin,kmax,icor,coh,inc,atden);endifu = interfu(k,icor,inc,coh,avef2,fac);inte = icor*fac-inc;