function [fit,wt1,at1,wt2,at2,bkgd]=absfit(e,absdata,z1,w1,z2,w2,wt)%% ABSFIT%% Usage: [fit,wt1,at1,wt2,at2,bkgd]=absfit(e,absdata,z1,w1,z2,w2)%% Composition determination from x-ray absorption for a pair% of elements. Fits measured absorption data to a spectrum% based the calculated mass absorption coefficient plus a % polynomial background function (cubic in x-ray wavelength).%% Input:%       e = array of x-ray energy, in eV%       absdata = array of absorption data, log(I/I0)%       z1, z2 = atomic numbers of the two elements%       w1, w2 = initial guess on weight fractions%       wt = weighting of energy points for fit (optional)%% Output:%       fit = total absorption%       wt1, wt2 = weight fractions of the two elements%       at1, at2 = atomic fractions of the two elements%       bkgd = polynomial background%% See also: ABSORB% Originally written by TCH sometime in 1994.% This version uses weight fractions explicitly, and uses calls to SMB's Absorption package% Copyright 2001, Todd C.  Hufnagel (hufnagel@jhu.edu)% Reference: Lane Wilson, Ph.D. thesis, Stanford University, 1990% Requires: abs_spectrum.m, element.m, absorb.m, atomdata.m, leasqr.mglobal MURHO1 MURHO2if nargin<7,	wt=ones(size(e));endMURHO1=MURHO1(:);MURHO2=MURHO2(:);e=e(:);absdata=absdata(:);% Calculate mu/rho for each element at each energy[z1, sym1]=element(z1);[mu1,rho1]=absorb(sym1,e);MURHO1=mu1.*1e4/rho1;			% ABSORB returns mu in inverse microns, we need inverse cm%m1=atomdata(z1);%omega1=mu1.*rho1./m1;[z2, sym2]=element(z2);[mu2,rho2]=absorb(sym2,e);      % Setting of global ANOMAL_FLAG determines source of f''MURHO2=mu2.*1e4/rho2;			% ABSORB returns mu in inverse microns, we need inverse cmc0=1;c1=1;c2=1;c3=1;pin=[w1 w2 c0 c1 c2 c3];			% Create the parameter vector[fit,pout]=leasqr(e,absdata,pin,'abs_spectrum',0.001,100,wt);bkgd=pout(3)+pout(4).*e.^(-1)+pout(5).*e.^(-2)+pout(6).*e.^(-3);wt1=pout(1)./(pout(1)+pout(2));wt2=pout(2)./(pout(1)+pout(2));amu1=atomdata(z1);amu2=atomdata(z2);at1=wt1./amu1./(wt1./amu1+wt2./amu2);at2=wt2./amu2./(wt1./amu1+wt2./amu2);plot(e,absdata,e,fit,e,bkgd)s=sprintf(', Z= %2g, %5.3g wt. frac., %5.3g at. frac.',z1,wt1,at1);disp(['Element ',sym1,s]);s=sprintf(', Z= %2g, %5.3g wt. frac., %5.3g at. frac.',z2,wt2,at2);disp(['Element ',sym2,s]);