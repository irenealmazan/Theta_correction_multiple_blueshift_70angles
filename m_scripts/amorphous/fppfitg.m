function [fpp,den]=fppfitg(energy,xas,atom,edgename)% FPPFITG - Determine f'' from absorption data %% Usage: [fpp,den]=fppfitg(energy,xas,atom,{edgename})%% Graphical front-end to FPPFIT, which determines the anomalous % scattering factor f'' from measured absorption data for a % single element. The absorption from all other elements and % the detector response function are removed, and the absorption % is normalized to a parameterized f'' (e.g. Cromer-Liberman) % far from the edge.%% Input:%   erg       = energy array for absorption data (eV)%   xas       = array of absorption data (ln(Io/I))%   atom      = atomic name (string) or number for element of interest%   edgename  = edge of interest. Can be 'K', 'LI', 'LII', or 'LIII' %               (optional, defaults to 'K').%% Output:%   fpp     = experimental f'' for element of interest%   den     = number density * thickness for this element (1/AA^2)%% See also: FPPFIT, KRAMKRON% Reference: Lane Wilson Ph.D. thesis, Stanford University, 1990.% Based on FPPFIT.FOR written by Lane Wilson 3/3/86% originally based on FPPCL.FOR written by Karl Ludwig% Matlab version 7/21/2000 Hope Ishii - hope.ishii@stanford.edu% 23-Jul-00 SMB Bren@slac.stanford.edu% 16-May-03 TCH Error checking, better comments, and code clean-up%           Do any edge (not only K)% Requires: element.m, atomdata.m, anomal.m, gtline.menergy=energy(:);xas=xas(:);% Verify size of energy and XAS arrays are the sameif length(energy)~=length(xas),        error('Energy and XAS data are not of same length')end% Verify atom is an atomic number, or get number from nameatom=element(atom);% Obtain edge energies for element of interest[dum1,dum2, alledge] = atomdata(atom);% Pick out the edge that we wantif nargin<4    edge=alledge(1);               % Default to K edge    edgename='k';elseif isempty(edgename)    edge=alledge(1);    edgename='k';else        edgename=lower(edgename);    switch edgename        case 'k'                    % K edge            edge=alledge(1);        case 'li'            edge=alledge(2);        case 'lii'            edge=alledge(3);        case 'liii'            edge=alledge(4);        otherwise            error('Unknown absorption edge name (must be K, LI, LII, or LIII)')    endendedge=edge.*1000;                    % Convert from keV to eVerange= [edge-50 energy(end)-100];imin= max(find(energy<=erange(1)));imax= min(find(energy>=erange(2)));yrange= [xas(imin) xas(imax)];% Visual check of raw datah=plot(energy,xas,'r',erange(1),yrange(1),'b*',erange(2),yrange(2),'b*');set(h,'Markersize',14);title('Raw XAS data'), xlabel('Energy (eV)'), ylabel('ln(I_{o}/I)')ans=gtline('Default energies for excluded region: Overide?','Ny');if ans,        [erange,ycur]=ginput(2);enddisp(sprintf('Excluded energy range from %6.2f to %6.2f',erange));disp('The background will be fit to a sum(1/E^n) components.')dummy=1; while dummy==1,        nmax= gtline('Enter maximum integer exponent (1<n<6)',2);        nmax=round(nmax);        if  nmax>5|nmax<2,                warning(' 1<n<6');        else                dummy=0;        endend[fpp,den]=fppfit(energy,xas,atom,edgename,erange,nmax);