function [coh,inc,avef2] = calscat(k,s,energy,ff,fp,fpp,sample,geo,adasf);% CALSCAT   Independent coherent intensity, incoherent intensity, and <f><f*>% % Usage: [coh,inc,avef2] = calscat(k,s,energy,ff,fp,fpp,sample,geo{,adasf});%% Calculates the independent coherent intensity <ff*>, Compton scattering,% and <f><f*>, for either x-rays or electrons. Which one is used depends% on the setting of the global PROBE; PROBE=0 is x-rays (the default) while% PROBE=1 is electrons. For electron scattering, the inelastic scattering% is presumed to be zero. Note that PROBE also affects the scattering% vector, as described below.%% Input:%   k      = array of scattering vector magnitudes in inverse Angstroms.%            For x-rays (PROBE=0), k = 4pi/lambda sin(theta)).%            For electrons (PROBE=1), k is actually s=2*sin(theta)/lambda.%   s      = string containing formula unit (e.g. water is '2H1O')%   energy = x-ray or electron energy in eV%   ff     = atomic form factor f(k) for elastic x-ray or neutron scattering. %            If ff=[], a parameterization will be used; which one depends on the%            global FF_FLAG - see the documentation. If specified, ff is a two-%            dimensional array with one column for each  element (in the same %            order as in  s above), with the rows corresponding to the values of k.%   fp     = real part (f') of the dispersion correction. fp is a row vector, with %            one entry for each element (the same order as in s above). Ignored for %            electron scattering.%   fpp    = imaginary part (f'') of the dispersion correction (form similar to fp).%            Note that the convention used is that fpp should be positive. Ignored%            for electron scattering.%   sample = [thick rho], where%            thick  = thickness of the sample (cm)%            rho = density of the sample (g/cm^3)%   geo    = String indicating absorption correction for Compton scattering:%            'reflthick' symmetric reflection, infinitely thick sample%            'reflthin'  symmetric reflection, thin sample%            'trans'	or 'transpart'	symmetric transmission geometry%            'tem' electron scattering (i.e. no Compton scattering)%   adasf  = angular dependence of the anomalous scattering factors (optional):%            adasf=[zed ap1 ap2 app1 app2], where zed = atomic number of edge element.%            Then fp=fp*(1+ap1*sin(theta).^2+ap2*sin(theta)^4) and %            fpp=fpp*(1+app1*sin(theta).^2+app2*sin(theta)^4)%   % Output:%   coh    = coherent independent intensity <ff*>%   inc    = incoherent independent intensity (Compton scattering)%   avef2  = the square of the average scattering amplitude, <f><f*>% Todd Hufnagel (hufnagel@jhu.edu) 4-30-00. Originally by:% Ritva Serimaa, X-ray Laboratory, Dept. of Physics, Univ. of Helsinki, 1991% Comments added and minor changes, TCH 8-20-93% Modifed FPRIME to default to Cromer-Liberman calculations, TCH 4-4-94% Minor Matlab 5 compatibility changes TCH 11-2-97% Major code clean-up TCH 4-30-00% TCH 5-16-00 Set f' and f'' to zero for TEM% TCH 4-1-02 Added parm parameter for choosing parameterization for f% TCH 4-1-02 Added parameter to describe angular dependence of anomalous scattering factors.% TCH 6-7-02 Changed input so that the user can supply the form factor%			explicitly, if desired. This meant adding a new flag (FF_FLAG)%			to choose which parameterization to use, and removing 'parm'% TCH 05-May-03 Incorporated function BDIRAC directly into CALSCAT. Added%           error checking of k range.% TCH 07-May-03 Incorporated REFLTHIC, REFLTHIN, TRANSINC, CALCOH, and%           CALINC directly into CALSCAT. Also (finally) properly%           implemented Q_FLAG switch.% TCH 08-May-03 Got rid of Q_FLAG and replaced it with PROBE switch.global PROBE% If not specified, default to x-raysif isempty(PROBE)	PROBE=0;endk=k(:);% The various scattering routines (CALCOH and CALINC) use% k=4*pi*sin(theta)/lambda, if necessary we convert from% s=2*sin(theta)/lambda to k, without changing the original input.switch PROBE    case 0          % X-rays        localk=k;    case 1          % electrons            localk=2.*pi.*k;    otherwise       % oops        error('Unknown value of PROBE! (Should be 0 for x-rays or 1 for electrons.)')    end    if nargin<9	adasf=[];endthick=sample(1);   rho = sample(2);geo=lower(geo);% Convert x-ray or electron energy to wavelengthswitch PROBE    case 0          % x-rays        lambda = etolambda(energy,'x');        if lower(geo(1:3))=='tem'            warning('TEM geometry selected with PROBE=0 (for x-rays).')        end        case 1          % electrons        lambda = etolambda(energy,'e');        if lower(geo(1:3))~='tem'            warning('Non-TEM geometry selected with PROBE=1 (for electrons).')        end    otherwise       % oops        error('Unknown value of PROBE! (Should be 0 for x-rays or 1 for electrons.)')    end   % Check to see whether k range makes sensemax_k=4.*pi./lambda;    % This is OK even for s, because we converted s to local_k aboveif (max(localk)>max_k)    error('Maximum value of k is non-physical!')endcor = ones(size(localk));%% Calculate the absorption correction factor for the Compton scattering%if (geo(1:3)=='tem'),	cor=zeros(size(localk));elseif (geo(1:5) == 'trans'), 	cor=feval('transinc',localk,s,lambda,thick,rho);elseif geo(1:8) == 'reflthic',	cor=feval('reflthic',localk,s,lambda,rho);elseif (geo(1:8) == 'reflthin'),	cor=feval('reflthin',localk,s,lambda,thick,rho);end%% If the anomalous scattering factors are not given, look them up%if (geo(1:3)=='tem'), % No anomalous correction for electron scattering	[z,w]=strtoz(s);	fp=zeros(size(z));	fpp=zeros(size(z));elseif isempty(fp)==1 | isempty(fpp)==1,   [fp,fpp] = fprime(energy,s);   disp('Anomalous scattering factors not given; using Cromer-Liberman values.')end;%% Calculate the scattering functions, appplying the % absorption correction and Breit-Dirac recoil factor to incoherent intensity:%if isempty(adasf)	[coh,avef]	= calcoh(localk,s,ff,fp,fpp,geo);else	[coh,avef]	= calcoh(localk,s,ff,fp,fpp,geo,adasf,energy);endavef2       = abs(avef).^2;inc	    	= calinc(localk,s).*bdirac(k,lambda).*cor;%% Plot the results%switch PROBE    case 0          % x-rays        plot(k,coh,k,avef2,k,inc)        xlabel('k (inv. Angstrom)');ylabel('Intensity (electron units)');        title('Coherent self-scattering, incoherent scattering, and <f^2>');        legend('Coherent self-scattering, <ff*>','<f><f*>','Compton scattering')        grid    case 1          % electrons - no Compton scattering        plot(k,coh,k,avef2)        xlabel('s (inv. Angstrom)');ylabel('Intensity (electron units)');        title('Coherent self-scattering and incoherent scattering');        legend('Coherent self-scattering, <ff*>','<f><f*>')        grid    otherwise       % oops        error('Unknown value of PROBE! (Should be 0 for x-rays or 1 for electrons.)')    end        %-----------------------------------------function bd = bdirac(k,lambda);% BDIRAC  Breit-Dirac recoil factor of incoherently scattered intensity% % bd     = bdirac(k,lambda)%% input:% k      = 4 pi/lambda sin(theta) in 1/Angstroms% lambda = wavelength in Angstroms% output:% bd     = array of values of Breit-Dirac recoil factors%bd = (1.+0.04852*lambda*(k/(4*pi)).^2).^(-2);%-----------------------------------------function  refl = reflthic(k,s,lambda,rho);% REFLTHIC   Absorption correction for incoherent intensity%            (symmetrical reflection geometry, infinite thickness)%% Usage: refl   = reflthic(k,s,lambda,rho)%% Input:% 	k	= scattering vector magnitude (k = 4 pi/lambda sin(theta))%	s   = formula unit string, e.g. '2Al3O'%	lambda = x-ray wavelength (Angstroms)%	rho    = density (g/cm^3)%% Output:%	refl   = correction factor (use corrected=uncorrected*refl)% Todd Hufnagel (hufnagel@jhu.edu) 4-30-00% Originally by R. Serimaaenergy = lambdatoe(lambda);mu     = avgatom(energy,s)*rho;theta  = ktotheta(k,lambda);lam    = comptonshift(lambda,theta);energy = lambdatoe(lam);muen   = avgatom(energy,s)*rho;refl = 2*mu*(mu + muen).^(-1);%-----------------------------------------function refl = reflthin(k,s,lambda,thick,rho)% REFLTHIN   Absorption correction for incoherent intensity%            (symmetrical reflection geometry, finite thickness)%% Usage: refl   = reflthin(k,s,lambda,thick,rho)%% Input:%	k = array of scattering vectors (k=4*pi*sin(theta)/lambda)%   s = formula unit string (e.g. '1H2O' for water)%   lambda = x-ray wavelength (Angstroms)%   thickness = sample thickness (cm)%   rho = sample density (g/cm^3)%% Output:%	refl = correction factor (use corrected=uncorrected*refl)%% Todd Hufnagel (hufnagel@jhu.edu) 4-30-00% Originally by R. Serimaatheta = ktotheta(k,lambda);energy = lambdatoe(lambda);mu = avgatom(energy,s)*rho;lam    = comptonshift(lambda,theta);energy = lambdatoe(lam);muen   = avgatom(energy,s)*rho;refl   = 2*mu*(muen+mu).^(-1);j      = find(theta > 0);refl(j) = 2*mu*(muen(j)+mu).^(-1)...       .*(1-exp(-thick*(muen(j)+mu)./sin(theta(j)*pi/180)))...       ./(1-exp(-2*mu*thick* sin(theta(j)*pi/180).^(-1)));%-----------------------------------------function tra = transinc(k,s,lambda,thick,rho);% TRANSINC   Absorption correction for incoherent intensity%            (symmetrical transmission geometry)%% Usage: tra=transinc(k,s,lambda,thick,rho)%% Input:%	k = array of scattering vectors (k=4*pi*sin(theta)/lambda)%   s = formula unit string (e.g. '1H2O' for water)%   lambda = x-ray wavelength (Angstroms)%   thickness = sample thickness (cm)%   rho = sample density (g/cm^3)%% Output:%	tra = correction factor (use corrected=uncorrected*tra)%% Todd Hufnagel (hufnagel@jhu.edu) 4-30-00% Originally by R. Serimaaenergy = lambdatoe(lambda);mu = avgatom(energy,s)*rho;theta = ktotheta(k,lambda);lam = comptonshift(lambda,theta);energy = lambdatoe(lam);muen = avgatom(energy,s)*rho;tra = cos(theta*pi/180)/thick./(muen-mu).*(1-exp(-thick*(muen-mu)./cos(theta*pi/180)));%-----------------------------------------function [coh,avef] = calcoh(k,s,ff,fp,fpp,geo,adasf,energy);% CALCOH Coherent independent scattering%%   Calculates the average scattering factor <f> and the independent%   coherent scattering <ff*> for a molecule or formula unit. Uses %   Sean Brennan's ABSORPTION package.%% Usage:% [coh,avef] = calcoh(k,s,ff,fp,fpp,geo{,adasf,energy})%% Input:%  k		= array of scattering vector magnitudes (k=4*pi*sin(theta)/lambda) (inv. Angstroms)%  s      	= atomic configuration (e.g. '1H2O')%  ff		= atomic form factor f(k). If ff=[], a parameterization will be used%			(see documentation). If provided, ff is a two-dimensional array with %			one column for each  element (in the same order as in  s above), and %			The rows of ff correspond to the values of k.%  fp     	= real part (f') of the dispersion correction. fp is a row vector, with %			one entry for each element (the same order as in s above)%  fpp    	= imaginary part (f'') of the dispersion correction (form similar to fp).%			Note that the convention used is that fpp should be positive.% geo	= sample geometry string (see CALSCAT.M)% adasf	= angular dependence of the anomalous scattering factors (optional):%			adasf=[zed ap1 ap2 app1 app2], where zed = atomic number of edge element.%			Then fp=fp*(1+ap1*sin(theta).^2+ap2*sin(theta)^4) and %			fpp=fpp*(1+app1*sin(theta).^2+app2*sin(theta)^4)%			If not specified, then angular dependence is assumed to be zero.% energy= x-ray energy (eV). Required only if angular dependent ASF are used.% Output:% coh    = array of <ff*>% avef   = array of <f>%% Todd Hufnagel (hufnagel@jhu.edu)% Originally by Ritva Serimaa% Matlab 4.1 compatibility changes, TCH 9-10-93% Use sfcoef (from Absorption package), TCH 2-18-00% Take k from input instead of using global ktable, TCH 2-18-00% Code clean-up TCH 4-30-00% TCH 5-16-00 Added electron scattering ('tem') option% TCH 4-1-02 Added parm switch and made sfwaas the default% TCH 6-7-02 Added the form factor explicitly to the input list.%			Removed parm switch and added global FF_FLAG instead.% TCH 6-11-02 Angular dependence of ASF to second order (sin^4(theta) %			  instead of just first order (sin^2(theta))% TCH 6-13-02 Fixed bug in ADASF calculation (had left out factor of i in fpp term)% SMB 5-May-03 Clean up, and use call to FORMFACT instead of SFCOEF/SFWAAS% Requires: STRTOZ, ESCATFA, FORMFACTglobal FF_FLAG PROBEif isempty(FF_FLAG)	FF_FLAG=0; % Use parameterization of Waasmaier & Kirfel for form factor by defaultendif isempty(PROBE)    PROBE=0;    % Assume x-ray scattering by defaultendif nargin<7	adasf=[];	energy=0;end%% Parse the string containing the chemistry information%[z,w] = strtoz(s);        nz = max(size(z));%% Calculate composition in atomic percent%w     = w*sum(w)^(-1);%% Initialize a few arrays%coh   = zeros(size(k));    avef  = zeros(size(k));if isempty(ff)	if lower(geo(1:3))=='tem'        disp('Atomic form factors for electron scattering not given; using Peng parameterization.')    else        if (FF_FLAG==1)		    disp('Atomic form factors not given; using Cromer and Mann parameterization.')	    else		    disp('Atomic form factors not given; using Waasmaier and Kirfel parameterization.')	    end    endelse	disp('Using user-supplied form factors.')end	%% Note that the following are array calculations, performed for the% whole k range at once.%for l = 1:nz,			                		% For each element    switch PROBE        case 0                                  % x-rays 		    % Do angular correction on fp and fpp, as necessary.		    [fpo,fppo]= localanglecorr(k,energy,fp(l), fpp(l), z(l), adasf);            		    if isempty(ff)			    f = formfact(z(l),k) + fpo + i*fppo;% use either C&M or W&K for form factor                sf(:,l)=f;                        else								    f= ff(:,l) + fpo + i*fppo;		% User-supplied form factor		    end                    case 1                                  % electrons 		    f=escatfa(z(l),k,'k');				% Get the electron scattering factors. Note that                                                % escatfa defaults to using                                                % s instead of k, but here                                                % we are passed k from                                                % above.        otherwise            error('Unknown value of global PROBE! (Should be 0 for x-rays or 1 for electrons).')    end              coh   = coh + w(l).*f.*conj(f);	    		% Calculate the coherent scattering	avef  = avef + w(l).*f;		        		% Calculate <f>end;    %STEPHAN ADD 11/17    %plot(k,.4*sf(:,1)+.4*sf(:,2)+.2*sf(:,3));    %pause    %END ADD    %% Take the magnitude of the coherent scattering%coh = abs(coh);% Return column vectorscoh=coh(:);avef=avef(:);%-----------------------------------------function [fpo,fppo]= localanglecorr(k,energy,fpin,fppin,zed,adasf)% [fpo,fppo]= localanglecorr(fpin,fppin,zed,adasf)if isempty(adasf) | adasf(1)~=zed,	fpo = fpin;	fppo= fppin;else	ksq= sind(ktotheta(k,etolambda(energy))).^2;	fpo = fpin  *(1 + adasf(2)*ksq + adasf(3)*ksq.^2);	fppo= fppin *(1 + adasf(4)*ksq + adasf(5)*ksq.^2);end%-----------------------------------------function inc = calinc(k,s);% CALINC  calculation of incoherent intensity for a molecule or%		  formula unit. Calculations are available for all%         elements from the Absorption package by Sean Brennan.%% Usage: [k,inc] = calinc(k,s);%% Input:%			k = array of 4*pi*sin(theta)/lambda (inv. Angstroms)% 			s = atomic configuration, e. g. '2Al3O'% Output:% 			inc = array of incoherent intensities (electron units)%% Todd Hufnagel (hufnagel@jhu.edu) 4-30-00% Originally by R. Serimaa% Comments added, TCH 8-20-93% Matlab 4.1 compatibility changes, TCH 9-10-93 (notated ML4.1)% Use k as input rather than global ktable, TCH 2-18-00% Use Absorption package instead of lookup table, TCH 5-2-00%% Parse the string containing chemistry information, and calculate the% atomic composition for each element%[z,w] = strtoz(s);    nz = max(size(z));    w = w*sum(w)^(-1);%% Initialize the array%inc = zeros(1,length(k));%% Calculate the incoherent scattering (note these are array calculations for% the whole k range at once) and calculate the total incoherent scattering% based on the composition of the sample.%for i = 1:nz,   [scat_fact,compton] = sfcoef(z(i),k);   inc = inc + w(i)*compton;end;% Return column vectorinc=inc(:);