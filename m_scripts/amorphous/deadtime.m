function [dt,scale]=deadtime(data);% DEADTIME - Calculates detector deadtime%% Usage:  [deadtime,scale]=deadfit(data);%% Calculates detector deadtime.  Strictly applicable only to% the case of a gas-filled proportional counter at a continuous% (not pulsed) source).%%	deadtime = detector/electronics deadtime, microseconds%	data = array of deadtime data, where%		data(1) = scalar counts%		data(2) = monitor counts%		data(3) = count time (seconds)%		data(4) = offset (counts) i.e. dark count rate%% TCH 7-1-94% Originally in FORTRAN by Paul Zschack, ORNL/NSLS.  Be warned that% the MATLAB version gives slightly different results than the% FORTRAN version (typically 0.5-1% lower values for deadtime).  I% have no idea why this is...% Define names for the data sets	scalar=data(:,1);	monitor=data(:,2);	time=data(:,3);	offset=data(:,4);% Define source type if not given	if nargin<2 source='continuous'; end% Calculate standard deviates	sigma=sqrt(scalar)./scalar;% Subtract the offset (i.e. dark count rate) and calculate count rate	scalar=(scalar-offset)./time;	monitor=monitor./time;% Make initial guess at the parameters	[minmscalar,minindex]=min(scalar);	scale=scalar(minindex)./monitor(minindex);	dead=2e-6;% Call the minimization routine	[f,p,kvg,iter]=leasqr(monitor,scalar,[dead scale],'deadfunc',1e-4,100,1./sigma);% Calculate and return deadtime if fit converged...	if (kvg==1)		dt=p(1);		scale=p(2);		plot(monitor,scalar,'o',monitor,f);% ...but if not, return an error message.	else		disp('No convergence...')		dt=[];	endfunction y=deadfunc(x,p)% DEADFUNC - Detector deadtime function%% x = array of monitor count rates (cps)% p(1) = deadtime (microseconds), p(2)=scale factor%% TCH 7-1-94, originally by Paul Zschackscale=p(2);deadtime=p(1);y = scale.*x.*exp(-scale.*deadtime.*x);