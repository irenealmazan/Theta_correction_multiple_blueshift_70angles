function [xpos, peak, fwhm, shape, const, slope, area]= ...			voigtfit(xarray,yarray,shape) %  VOIGTFIT - Fit a single Voigt with linear background to data%%  Usage: [xpos, peak, fwhm, shape, const, slope, area]= voigtfit(xarray,yarray,shape) %%  Input:   xpos  = array of x-data (angle, for instance)%           ypos  = array of y-data (intensity, for instance)%			shape = shape parameter (0=Gaussian, 1=Lorentzian, 2=Voigt [default])%%  Output:  xpos  = peak position%           peak  = peak height %           fwhm  = full width at half-maximum%			shape = shape parameter%			const = intercept of linear background%			slope = slope of linear background%			area  = area under peak%  functions called:%  leasqr  (the actual fitting routine)%  pk_qvt   (the function)%  pk_qvtdf  (the jacobian of the function)%  Created: 29-APR-1997 %  Author :  Sean M. Brennan (Bren@SLAC.stanford.edu)%  Modifications:%  14-JUL-99 Todd Hufnagel, JHU (hufnagel@jhu.edu)%    1) Make default plot linear scale%    2) Make default 1/sqrt(y) weighting%    3) Print out all fit results to command window%    4) Plot correct final result%    5) Cleaned up help comments%  10-MAR-02 Todd Hufnagel%    1) Also return area under peakglobal verbose% tell leasqr what you want:  verbose(1)= 1;  % Don't print outputverbose(2)= 0;  % Don't plot intermediate resultsverbose(3)= 1;  % Linear scale (log scale would be 0)verbose(4)= 0;  % Don't stop prematurelyif nargin < 3,	shape= 2;endif nargin < 2,	error('Both X and Y arrays are necessary')endxarray= xarray(:);yarray= yarray(:);npts= length(xarray);[peak,index]= max(yarray);   % find peak of yarrayxpos= xarray(index);         % that's the xval, too.% Now find sigmadelta_y=yarray(2:npts)-yarray(1:npts-1);delta_x=xarray(2:npts)-xarray(1:npts-1);int_diff=delta_y./delta_x;[dum l_peak]=max(int_diff(1:index-1));[dum r_peak]=min(int_diff(index:npts-1));r_peak=r_peak+index;sigma=xarray(r_peak)-xarray(l_peak);% Determine the background and slopel_bgrnd=mean(yarray(1:ceil(npts/10)));rbg=mean(yarray(floor(9*npts/10):npts));slope= (rbg-l_bgrnd)/(xarray(length(xarray))-xarray(1));lambda= [xpos peak sigma shape l_bgrnd slope];constrain=0.001*ones(6,1);  % only 3 parameters, fit them allif shape < 2,	constrain(4)= 0;		% Constrained fit	ncon= 5;else	shape= 0.5;				% Guess 50% gaussian	ncon= 6;end% Weighting. For equal weights, make this wt= ones(npts,1);wt= 1./sqrt(yarray);[fity,lambdaf,kvg,iter,corp,covp,covr,stdresid,Z,r2]= ...	leasqr(xarray,yarray,lambda,'pk_qvt',.001,50,wt,constrain,'pk_qvtdf');chi2= sum(((yarray-fity).*wt).^2)/(npts-ncon);total_area= trapz(xarray,fity);xpos= lambdaf(1);peak= lambdaf(2);fwhm= lambdaf(3);shape= lambdaf(4);const= lambdaf(5);slope= lambdaf(6);area=total_area;%fit=pk_qvt(xarray,lambdaf);%hgraph=plot(xarray,yarray,'+',xarray,fit,'-'); %fprintf('Chisqr=%g  xpos=%g  peak=%g  fwhm=%g  shape=%g  area=%-8.3g\n',chi2,xpos,peak,fwhm,shape,total_area);