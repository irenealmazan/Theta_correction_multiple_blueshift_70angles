function [outputs, textline]=gtline(prm,def,mask,fid)% GTLINE.M prompts for user input, supplying a default value if needed.%% Calling syntax:  [ouputs,textline]=gtline(prm,def,mask,fid) where%   prm = prompt string%   def = default value%       = 'Yn' or 'nY' for a 0=no,1=yes with default=yes%       = 'yN' or 'Ny' for a 0=no,1=yes with default=no%   mask = FORMAT string used tocreate prompt, without leading '%'%        = 's' for string, 'g' for number (default), etc.%   fid = file ID, or 0 to read from keyboard (default).%   outputs = user's input, evaluated as a Matlab expression%   textline = text string containing the entire line of user input% % NOTES%   1) Yes/No questions may be answered with either 1, 0, 'y', or 'n'.  %      The result is 1 when the user enters 1 or 'y', and 0 when the user %      enters 0 or 'n'.%   2) To break out of the calling program, enter 'quit' (without quotes). %      Typing control-C simply returns the default value.%   3) Expressions are evaluated before being assigned to the variable.   %      Expressions that cannot be evaluated are assigned as string variables.  %      String variables may be placed in single quotes to ensure that they %      are evaluated as strings.% % Calling syntax                            Prompt displayed to user% ---------------------------------------   ----------------------------------% a=gtline('A number');                    Number > % a=gtline('A number',3);                  Number (default=3) >% a=gtline('Continue?','Yn');              Continue? 0=N, 1=Y (default=1) >% a=gtline('Name','Ted','s');              Name (default=Ted) > % a=gtline('Levels?',[.1:.05:.2],'3.2f');  Levels? (default=[.10 .15 .20 ]) >%% Expression entered by user    Value returned by GTLINE% --------------------------    -------------------------% 3*4+5                         17% '3*4+5'                       '3*4+5'% 2:2:8                         [2 4 6 8]% Any string variable           'Any string variable'%% Examples using fid:% a=gtline('Enter value',3,0)                    % reads number from kbd% a=gtline('Cutoff value?',100,fid)              % reads number from FID% a=gtline('Cutoff value?','test','s',fid)       % reads string from FID%% Written by:  C. Ruckman (ruckman@oasys.dt.navy.mil)%% See also:  INPUT, KEYBOARD% Set the defaults if not all arguments are supplied.yn=[];if ~exist('mask') mask='g'; endif nargin==1                                    % only prompt     def=[];elseif nargin==2 & strcmp(def,'s')              % only prompt and 's'     def=[];      mask='s';elseif nargin==3 & ~isstr(mask)                 % prompt, default, fid     fid=mask;     mask='g';elseif strcmp(def,'Yn')|strcmp(def,'nY')        % prompt + yes/no     yn=1;     def=1;     mask='g';elseif strcmp(def,'yN')|strcmp(def,'Ny')        % prompt + no/yes     yn=1;     def=0;     mask='g';endif ~exist('mask')     if isstr(def) mask='s'; else mask='g'; endendmask=['%' mask ' '];if ~exist('fid')   fid=0;   end% Set up the prompt string.if isempty(def)      prm2=sprintf('%s > ', prm);elseif yn     prm2=sprintf('%s  (y/n) (default=%i)', prm,def);else     prm3=sprintf(mask,def);     if length(def)>1 & ~isstr(def) prm3=sprintf('[%s]',prm3); end     prm2=sprintf(['%s (default=%s) > '],prm,prm3);end% Truncate and/or wrap to next line of the prompt string is too long.if length(prm2)>130 prm2=[ prm2(1:130) '...']; endif length(prm2)>50 prm2=sprintf('%s\n > ',prm2); end% get the line of text from file or keyboard if fid textline=fgetl(fid);else textline=input(prm2,'s'); end% If user types 'quit' then return with error string.% NOTE:  This is the only way to interrupt the calling routine.  Pressing % Ctl-C won't do it; INPUT returns a null as if the user had pressed return.if strcmp(lower(textline),'quit') error('routine cancelled by user'); end% If string comes back empty, use default value.if isempty(textline)      outputs=def; % If it's a yes/no question, convert y/n answer to 1/0 if needed.elseif yn     if     strcmp(lower(textline),'y')|...	 strcmp(lower(textline),'1') outputs=1;     elseif strcmp(lower(textline),'n')|...	 strcmp(lower(textline),'0') outputs=0;     end% Otherwise, evaluate the expression contained in textline.  If the% expression cannot be evaluated, return it as a string.else      eval(['outputs=' textline   ';'],['outputs=''' textline ''';']);end