function [cd_strf, thetab, gamma, d_dsp, rho_ave, vol] = ...			struct_f( h, k, l, energy, t_cryst)% Calculate structure factor, RDLAT must be called in advance% Usage: [cd_strf, thetab, gamma, d_dsp, rho_ave, vol] = ...%                       struct_f( h, k, l, energy,{ t_cryst} )% Note: These are f's, not Chi's.  Chi= f*gamma% Input:% h,k,l= miller indices of reflection to be calculated% energy (eV)% t_cryst= crystal temperature (K)% Output:% cd_strf= complex f% thetab= theta bragg (degrees)% gamma= conversion from f to Chi% d_dsp= dspace (Angstroms)% rho_ave= density (gms/cm^3)% vol= crystal unit cell volume (A^3)% Polarization is assumed to be sigma.  If not, deal with it% afterwords.% Fortran version written by Sean Brennan at SSRL, described in% S. Brennan and P.L. Cowan, Rev. Sci. Instrum., 63, 850 (1992).% SSRL/SLAC Bren@slac.stanford.edu% V3.0 ported to MATLAB, Alex Lessmann (1.0)% 18-NOV-95 SMB MATLAB compatible% 11-Feb-96 call sfwaas instead of sfcoef % 26-Sep-97 remove ipol as input parameter.  Always sigma% 26-Sep-97 t_cryst defaults to 293% 5-May-03 replace call to sfwaas with formfact, governed by FF_FLAG% calls to: dspace, atomdata, anomal, raycomp, formfact, debye% Copyright 1996 Anneli Munkholm & Sean Brennan.% Stanford Synchrotron Radiation Laboratory% Stanford Linear Accelerator Center, Stanford CA 94309% bren@slac.stanford.edu; munkholm@anl.govglobal  STR_BASIS STR_SITES STR_ATOMSglobal	STR_ZED STR_FRACT STR_ATOMX STR_ATOMY STR_ATOMZglobal	STR_LATTICE STR_T_DEBYE STR_TEMP_COEF STR_STIFFglobal  STR_AMU STR_FP STR_FPP STR_COMP STR_ERGHC			= fhc;		% ev-AELECTRON_RADIUS		= f_e_rad;			% in AngstromsAVOGADRO_CC_PER_AA	= f_avogad*10^(-24);% atoms-cc/mole-A^3DEGREES_TO_RADIANS	= fdegrad;cd_strf=0; thetab=0; gamma=0; d_dsp=0; rho_ave=0; vol=0;if nargin<5,t_cryst=293;endif nargin<4,energy=8048;endif nargin==0, help struct_f; break; end[d_dsp,vol] = dspace( h, k, l, t_cryst );if vol == 0    error( 'Crystal volume undefined' )endif d_dsp >0,	ksp= 2*pi/ d_dsp;	sinthe= HC/(2* energy* d_dsp);	if sinthe <= 1,		thetab= asin( sinthe)/ DEGREES_TO_RADIANS;	else		thetab=0;	endelse	ksp= 0;endiread = 1;if energy == STR_ERG    iread = 0;endcd_strf = 0 + 0*i;amu_tot = 0;for i1 = 1:STR_BASIS				% loop over atomic sites    amu_site = 0;    form_fact = 0;    fpp_ave = 0;    % now loop over different atomic species on each atomic site    for i2 = 1:STR_ATOMS(i1)		if iread,	% New energy, must read in new values		    STR_AMU(i1,i2)= atomdata(STR_ZED(i1,i2));		    [STR_FP(i1,i2), STR_FPP(i1,i2)] = ...				anomal(STR_ZED(i1,i2),energy);		    [ray, STR_COMP(i1,i2)] = ...				raycomp(STR_ZED(i1,i2),energy);		end		fpp_ave = fpp_ave + STR_FRACT(i1,i2) * ...					(STR_FPP(i1,i2)+STR_COMP(i1,i2));		amu_site = amu_site + ...				STR_FRACT(i1,i2)*STR_AMU(i1,i2);		form_fact = form_fact + STR_FRACT(i1,i2) * ...			(formfact(STR_ZED(i1,i2),ksp)+STR_FP(i1,i2));    end    cd_form = form_fact + fpp_ave*i;    denom = 4 * amu_site * (STR_T_DEBYE*d_dsp)^2;    if t_cryst <= 0	t_cryst = 0.000001;	% choose a very cold temperature if undefined    end    if denom > 0	debwal = 1.14904e4 * t_cryst * (debye( STR_T_DEBYE/t_cryst ) ...			+ (STR_T_DEBYE/t_cryst)/4) / denom;    else	debwal = 0;    end    % Calculate crystal factor for each reflection%	cd_cryst= sum( exp( 2*pi*i* ...%	( h*STR_ATOMX(i1,:) + k*STR_ATOMY(i1,:) + l*STR_ATOMZ(i1,:))));% Change from AM 2-22-99	cd_cryst= sum( exp( 2*pi*i* ...		( h*STR_ATOMX(i1,1:STR_SITES(i1)) ...		+ k*STR_ATOMY(i1,1:STR_SITES(i1)) ...		+ l*STR_ATOMZ(i1,1:STR_SITES(i1)))));    cd_strf = cd_strf + cd_form * cd_cryst * exp( -debwal );    amu_tot = amu_tot + amu_site * STR_SITES(i1);endrho_ave = amu_tot / (AVOGADRO_CC_PER_AA * vol);gamma = (ELECTRON_RADIUS / (pi*vol)) * (HC/energy)^2;STR_ERG = energy;		% store current energy for next timereturn