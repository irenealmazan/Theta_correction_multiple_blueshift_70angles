Readme file for absorption library.Absorption package based on fortran code developed by S. Brennan and P.L.Cowan.  If you use the routines found here in work leading to a publication,we would appreciate a reference to the work on this subject:    S. Brennan and P.L. Cowan    "A suite of programs for calculating x-ray absorption, reflection and    diffraction performance for a variety of materials at arbitrary    wavelengths" Rev. Sci. Instrum., 63, 850 (1992).	The conversion of these routines into Matlab m-files involved the workof Anneli Munkholm and Alex Lessmann, who have my unending gratitude.Comments, bug-reports, etc. should go toSean BrennanStanford Synchrotron Radiation LaboratoryStanford Linear Accelerator CenterStanford, CA 94309Bren@slac.stanford.edu	General:  Package consists of fundamental routines for calculating physicalparameters.  These routines are ATOMDATA, CROMER, HENKE, RAYCOMP, SFCOEF,and STRUCT_F.  They rely on certain global pathnames being predefined.  There are four globals which I define in my startup.m.  Note that they are all CAPITAL LETTERS.  There is a template file included in this directorylabeled startup_for_anomalous.m, which can be added to your existingstartup.m.The globals are:DISK_PATH		% This tells the program the directory where all my user-				% written files live.( in my case, DISK_PATH= 'Mortimer:MTLF';)The routines themselves are expected to reside in a directory called'anomalous' as a subdirectory of the directory pointed to by DISK_PATH.If you are unlucky enough to have a Windoze machine, you will have toshorten anomalous to something <= 8 letters.  AFAIK you only need tochange ANOMAL_FILES to compensate for that.ANOMAL_FILES	% This points to the subdirectory for the mat files used				% by cromer.m and henke.m( in my case, ANOMAL_FILES= ':anomalous:data_dir';)ANOMAL_FLAG		% This chooses between calling cromer or henke( 0=cromer, 1= henke, defaults to cromer)DISK_DELIM		% This is the disk delimiter symbol(for the mac, DISK_DELIM= ':';)DISK_END		% For most machines this is the same as DISK_DELIM, but% for the VAX, DISK_END= ']';(for the mac, DISK_END= ':';)Below is the help from each of these fundamental routines:In this case, although the names are capitalized, the files themselves are not.ABSEDGES.M  absedges(elem_name)  Give the absorption edges and fluorescent energies for a given element  calls to element, atomdataABSG.M is the graphical user interface for ABSORB.M.ABSORB.M  [mu, rho, ifail] = absorb( name, energy, thick)  Calculate absorption coefficient mu (1/microns), density (gms/cm^3)  from e_name(string, either element, material or crystal)  energy (eV), and thick ( microns).  calls to: anomal, atomdata, element, ff_to_mu, gtline, matlabs,   rdlat, struct_f  This can be called in two ways, either as a function with returned  variables or as a script(-like) without output variables, at which   point certain info is printed on the screen.  To wit:  >> [mu,rho]=absorb(42,3000,3)  mu = 2.0321  rho = 10.2000  or  >> absorb si 8048  Element Si, Z= 14  Amu=     28.1  Rho=     2.32 gms/cc  f'=  0.254 f"=   0.33  Rayleigh= 0.00424 Compton=  0.00052  Absorption length=   69.1 microns at   8048 eV  Transmitted Intensity=  0.235 for    100 micronsANOMAL.M  This is a traffic-cop routine which passes the request for f' & f"   to either cromer.m or henke.m depending on the value of ANOMAL_FLAGATOMDATA.M  Determine amu, rho, number and energy of absorption edges  Based on data supplied by Cromer & Liberman  Usage: [r_amu, r_rho, nedge, abs_edge] = atomdata( zed )  calls to: amu_rho.matCR8ALLOY.M  This is a gui widget for defining the zed and atomic fractions  for cr8cryst and cr8matl.  Typically this is not called directlyCR8CRYST.M  Create a crystal .mat file.  This is very simple, only knows about  a few crystal types, but generally that's all I play with.  Calls to  cr8alloy.CR8MATL.M  Create a material file for use with Absorb.m  Define zed, fract and  total density (if not the sum of individual densities).  Calls to  cr8alloy.CR8_LAT.M  Non-gui way to create a crystal, to show what are the components that  are stored in the mat file.  Use CR8CRYST instead.  CR8INDEX.M  Calculate index of refraction for element or arbitrary material.CR8IDX.M  Graphical user version of CR8INDEX.M.CROMER.M  This routine reads data for f' and f" according to an  to an algorithm by Cromer and Lieberman  Usage: [fp, fpp] = cromer( zed, energy )  calls to: mcm.m lgndr.m indexm.m x_nrg.mat x_sect.mat   rel_cor.mat bnd_nrg.mat  HENKE.M  This routine is based on the data files of Henke & Gullickson  Compiled by B. L. Henke, E. M. Gullikson, and J. C. Davis   (Atomic Data and Nuclear Data Tables 54 No. 2 (July 1993))  Each element has a separate .mat file with all the tabulated values.  The tables are for the energy range from 50eV->30 keV.PTAB.M  Graphical interface to the periodic table, clicking on element  prints out density, atomic mass, Absorption edges, Fluorescence  lines.RAYCOMP.M  Calculate elastic and compton cross-sections (in electrons/atom)  Based on Mcmasters parameterization.  Usage: [ray, comp] = raycomp( zed, energy )  calls to ray_comp.matRDLAT.M  Read lattice file, must be called before STRUCT_F and DSPACE  Usage: noread = rdlat( crys_name )  Reads in a0,b0,c0,alpha,beta,gamma, atomic positions & occupancies  from .mat file for a particular crystal.SFCOEF.M  % SUPERCEDED BY SFWAAS.M but is still used for compton component  This function calculates f as f(sin(th)/lamda) given zed.  It uses the parametrized fits of Cromer and Mann, Acta Cryst. A24 321 (1968).  The function also calculates the compton component   using the fits of Balyuzi, Acta. Cryst. A31 600 (1975).  k is assumed to be 4pisin(theta)/lambda  and is converted to sin(th)/lambda within the routine.  This is only good to k<=18  compton = incoherent portion of scattering factor  Usage: [scat_fact, compton] = sfcoef( zed, k )  calls to: sfcoef.matSFWAAS.M  scat_fact = sfwaas( zed, k )  calculate atomic form factor given atomic number and   scattering vector k where k= 4*pi*sin(theta)/lambda  From D. Waasmaier and A. Kirfel, Acta Cryst A51, 416 (1995)  Note that hydrogen is H(minus) ion divided by 2.  This version is good to k<=75; but does not have the compton term  calls to: waaskir.matSTRUCT_F.M  Calculate structure factor, RDLAT must be called in advance  Usage: [cd_strf, thetab, gamma, d_dsp, rho_ave, vol] = ...                        struct_f( h, k, l, energy, t_cryst )  Note: These are f's, not Chi's.  Chi= f*gamma  calls to: dspace, atomdata, anomal, raycomp, sfcoef, debyeSTRUCTG.M  Graphical interface to STRUCT_F.M.  