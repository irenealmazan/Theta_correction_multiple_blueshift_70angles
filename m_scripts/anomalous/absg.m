function absg(command)% Gui version of Absorb% Copyright 1996 Anneli Munkholm & Sean Brennan.% Stanford Synchrotron Radiation Laboratory% Stanford Linear Accelerator Center, Stanford CA 94309% bren@slac.stanford.edu; munkholm@anl.govglobal DISK_PATH DISK_END ANOMAL_FILES DISK_DELIMif nargin==0 % initialize window	abs_i;	return;endif strcmp(command,'push_name')	eval(['cd ',DISK_PATH,ANOMAL_FILES,DISK_DELIM,'lat_dir']);	[filename, pathname] = uigetfile('*.mat','Crystal file for STRUCT');	if filename		set(findobj(gcf,'tag','crystal'),'String',filename(1:length(filename)-4));	endelseif strcmp(command,'energy')	energy= str2num(get(findobj(gcf,'tag','str_energ'),'string'));	set(findobj(gcf,'tag','str_lambd'),'string',sprintf('%5.4f',fhc/energy)); elseif strcmp(command,'lambda')	lambda= str2num(get(findobj(gcf,'tag','str_lambd'),'string'));	set(findobj(gcf,'tag','str_energ'),'string',sprintf('%5.1f',fhc/lambda)); elseif strcmp(command,'update')	%% read values	e_name= get(findobj(gcf,'tag','crystal'),'string');	energy= str2num(get(findobj(gcf,'tag','str_energ'),'string'));	thick= str2num(get(findobj(gcf,'tag','str_thick'),'string'));	%% calculate output	[mu,rho,zed,fp,fpp,ray,comp,tran,amu,abs_edge,element_symbol,ifail]=abscal(e_name,energy,thick);	edges= 1000*abs_edge;	%% update screen	if zed>0,		set(findobj(gcf,'tag','zed'),'string',num2str(zed)); 		set(findobj(gcf,'tag','amu'),'string',num2str(amu)); 		set(findobj(gcf,'tag','fp'),'string',num2str(fp)); 		set(findobj(gcf,'tag','fpp'),'string',num2str(fpp)); 		set(findobj(gcf,'tag','ray'),'string',num2str(ray)); 		set(findobj(gcf,'tag','comp'),'string',num2str(comp));		set(findobj(gcf,'tag','k_edge'),'string',sprintf('%5.1f',edges(1)));		if edges(2)>0,			set(findobj(gcf,'tag','l_edge1'),'string',sprintf('%5.1f',edges(2)));		else			set(findobj(gcf,'tag','l_edge1'),'string','');		end		if edges(3)>0,			set(findobj(gcf,'tag','l_edge2'),'string',sprintf('%5.1f',edges(3)));		else			set(findobj(gcf,'tag','l_edge2'),'string','');		end		if edges(4)>0,			set(findobj(gcf,'tag','l_edge3'),'string',sprintf('%5.1f',edges(4)));			set(findobj(gcf,'tag','k_alpha'),'string',sprintf('%5.1f',edges(1)-edges(4)));		else			set(findobj(gcf,'tag','l_edge3'),'string','');			set(findobj(gcf,'tag','k_alpha'),'string','');		end		if edges(7)>0,			set(findobj(gcf,'tag','k_beta'),'string',sprintf('%5.1f',edges(1)-edges(7)));		else			set(findobj(gcf,'tag','k_beta'),'string','');		end			else  		set(findobj(gcf,'tag','zed'),'string',''); 		set(findobj(gcf,'tag','amu'),'string',''); 		set(findobj(gcf,'tag','fp'),'string',''); 		set(findobj(gcf,'tag','fpp'),'string',''); 		set(findobj(gcf,'tag','ray'),'string',''); 		set(findobj(gcf,'tag','comp'),'string','');		set(findobj(gcf,'tag','k_edge'),'string','');		set(findobj(gcf,'tag','l_edge1'),'string','');		set(findobj(gcf,'tag','l_edge2'),'string','');		set(findobj(gcf,'tag','l_edge3'),'string','');		set(findobj(gcf,'tag','k_alpha'),'string','');		set(findobj(gcf,'tag','k_beta'),'string','');	end	set(findobj(gcf,'tag','mu'),'string',num2str(mu)); 	set(findobj(gcf,'tag','dens'),'string',num2str(rho)); 	set(findobj(gcf,'tag','abslen'),'string',num2str(1/mu)); 	set(findobj(gcf,'tag','tran'),'string',num2str(tran)); end